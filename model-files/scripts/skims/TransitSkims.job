; ----------------------------------------------------------------------------------------------------------------
;
; TransitSkims.job
;
; TP+ script to compute transit skims for five time periods. The script uses the following five time periods: 
;
;    (a) early AM, 3 am to 6 am
;    (b) AM peak period, 6 am to 10 am
;    (c) midday, 10 am to 3 pm
;    (d) PM peak period, 3 pm to 7 pm
;    (e) evening, 7 pm to 3 am the next day
;
; The first thing the script does is export the highway skims for each time period (as temporary csv files), so that TAZ->TAZ 
; times/distances can be captured by the drive-to-transit access procedure. Also, TAP connectors are exported as csv files so 
; that these can be identified by later (Python) scripts as belonging to specific transit modes.
;
; Next, a Python script is called to build the drive-to-transit drive access skims. These are developed from the highway
; skims (TAZ->TAZ), the MAZ->TAP skims, and the MAZ->TAZ correspondence file. Essentially, for each transit mode, the list of
; TAPs serving that mode are determined, and then the MAZs that are (walk) accessible to those TAPs. That list of MAZs gives a
; list of TAZs which can access those TAPs, and those are used as the (endpoints) for drive drive access, which is determined
; from the TAZ->TAZ skims. The output from this procedure is essentially a matrix with TAZs as the origins, TAPs as the
; destinations, and the values the MAZ used as an endpoint. We can't parse out just the shortest values because these may
; vary by time-of-day depending on which transit lines are available, and that information is not available by TAP directly.
;
; Also, the transit line files are rebuilt (via another Python script) to use the updated node-numbering in the transit network 
; (the TAPs need to be the first nodes (numerically) in the network, and all other nodes are renumbered).
;
; Finally, transit line skims are built. Because park-n-ride is dealt with outside of the skimming/assignment process, these skims
; are relatively straightforward, encompassing TAP->TAP movements, and only looking at walk access/egress/transfer. Walk access
; is provided through TAP->TAP walk-only connectors, which are discussed in more detail in the BuildTransitNetworks.job script.
;
; Three sets of skims are created: Set 1 - local bus only, Set 2 - all modes, and Set 3 - all modes with a high transfer penalty weight.
;
;       Mode class        Modes                Set 1     Set 2     Set 3
;       ----------------------------------------------------------------
;       Commuter Rail     130-139                n         y        y
;       Heavy Rail        120-129                n         y        y
;       Light Rail        110-119                n         y        y
;       Ferry             100-109                n         y        y
;       Express Bus       80-99                  n         y        y
;       Local Bus         1-79                   y         y        y
;
; Each transit skim mode is controlled by a factors file, kept in the /trn/ output directory (copied from the INPUTS/trn/tansit_support/
; directory). Each factor file specifies penalties, available modes (including access, egress and transfer modes), and transfer limits.
; The skims are run to keep only the best (shortest) path for each enumerated route, which greatly speeds up processing time. However, due
; to a (intermittent) bug in Cube, the default parameter on max transfers cannot be set at 5, but instead must be set at 2 (this bug causes
; networks with large zone counts to crash the skimming procedure sometimes).
;
; Currently the skimming procedure is highly distributed. The drive to transit input data scripts are distributed by time period, 
; and the actual transit skimming procedures are fully distributed by time period and mode. This means that 10 processes are initiated 
; currently. 
;
; Input: (1) A transit network for each time period, including updated link times based on highway assignment results
;        (2) A transit line file, listing all of the transit lines but keyed to the original (base) highway network's node numbers
;        (3) Highway skim matrices for each time period, output by the HwySkims.job script
;        (4) An MAZ->TAP walk access skim
;        (5) An MAZ->TAZ correspondence file
;        (6) An original node->new node correspondence file
;
; Output: (1) A (csv) drive-access matrix linking TAZ->TAP, as well as the intermediate MAZ for the path.
;         (2) A 15 table transit skim for each of the five time periods by skim-set, containing the following information:
;             (a) The generalized cost for the path
;             (b) The initial wait time, in minutes
;             (c) The transfer wait time, in minutes
;             (d) The transfer penalty, in minutes
;             (e) The boarding penalty, in minutes
;             (f) The number of transfers
;             (g) The total fare
;             (h) The transfer walk time
;             (i) The access/egress walk time
;             (j) The local bus time
;             (k) The express bus time 
;             (l) The ferry time 
;             (m) The light rail time 
;             (n) The commuter rail time 
;             (o) The "highest" mode used 
;
; version:  Travel Model Zed
; authors:  crf (2013 08) ; bts 06/11/14
;
;
; Updated to include transit system file for defining wait curves. Removed ferry (mode 104) from skim set 1 and included it 
; in SET2 and 3. Updated parameters in transit factor files. Also, build_walk_transfer_bypass_links.py file now sets distances 
; on walk transfer legs to eucledian distance 
; author: sn(11/7/2014)
; Updated to export ferry times as a separate matrix and to account for ferry as a distinct mode in BEST_MODE matrix.
; author: sn(5/5/2015)
; ----------------------------------------------------------------------------------------------------------------

SKIM_MATRICES = '%BASE_SCRIPTS%\block\skim_matrices.block'
SKIM_MATRIX_DEF = '%BASE_SCRIPTS%\block\skim_matrix_definitions.block'

;start cluster nodes - one for each skim set and time period
*Cluster.exe MTC_TRANSKIM 1-5 start exit

;now build transit times based on congested times from loaded network
;loop over time period
LOOP PERIOD = 1,5

    ; a two letter token is used for each time period
    IF (PERIOD = 1)   
        TOKEN_PERIOD = 'EA' 
    ELSEIF (PERIOD = 2)   
        TOKEN_PERIOD = 'AM' 
    ELSEIF (PERIOD = 3)   
        TOKEN_PERIOD = 'MD' 
    ELSEIF (PERIOD = 4)   
        TOKEN_PERIOD = 'PM'
    ELSEIF (PERIOD = 5)   
        TOKEN_PERIOD = 'EV'
    ENDIF


        ; do each time of day and SKIMSET as a separate process
        DistributeMultistep processid = 'MTC_TRANSKIM', processNum = PERIOD
            ;make a copy of the network so that we don't walk all over each other
            *copy hwy\mtc_transit_network_@TOKEN_PERIOD@_CONG.net trn\mtc_transit_network_@TOKEN_PERIOD@.net
            

            ;next, build actual transit skims
            RUN PGM = PUBLIC TRANSPORT PRNFILE="TRANSIT_SKIM_@TOKEN_PERIOD@.prn"
                FILEI NETI = "trn\mtc_transit_network_@TOKEN_PERIOD@.net"
                FILEI LINEI[1] = "trn\transitLines_new_nodes.lin"
                FILEI SYSTEMI = "trn\transitSystem.PTS"
                FILEI FACTORI[1] = "trn\transitFactors_SET1.fac"
                FILEI FACTORI[2] = "trn\transitFactors_SET2.fac"
                FILEI FACTORI[3] = "trn\transitFactors_SET3.fac"
                
                FILEI FAREMATI[1] = "trn\fareMatrix.txt"
                FILEI FAREI= "trn\fares.far"
                
                FILEO NETO = "trn\mtc_transit_network_@TOKEN_PERIOD@_with_transit.net" 
                
                READ FILE = @SKIM_MATRICES@
                
                FILEO LINEO = "trn\mtc_transit_lines_@TOKEN_PERIOD@_with_transit.lin"
                FILEO NTLEGO = "trn\mtc_transit_ntlegs_@TOKEN_PERIOD@_with_transit.ntl"

                ; These files are gigantic and writing many simultaneously cause PT to fail
                ; with the message: F(801): (EnumRoutes) Failure writing to output routes file.
                ; We cannot comment them out, however, since 
                ; "The statement ROUTEO[x] invokes the route-enumeration process for user class x." (!!)
                FILEO ROUTEO[1] = "trn\mtc_transit_routes_@TOKEN_PERIOD@_SET1_with_transit.rte"
                FILEO ROUTEO[2] = "trn\mtc_transit_routes_@TOKEN_PERIOD@_SET2_with_transit.rte"
                FILEO ROUTEO[3] = "trn\mtc_transit_routes_@TOKEN_PERIOD@_SET3_with_transit.rte"

                FILEO REPORTO = "trn\mtc_transit_report_@TOKEN_PERIOD@_with_transit.rpt"
                
                PARAMETERS HDWAYPERIOD=@PERIOD@
                PARAMETERS NOROUTEERRS=17000000
                PARAMETERS TRANTIME=LI.TRANTIME
                PARAMETERS MAPSCALE=5280

                PROCESS PHASE=LINKREAD
                    LW.TRANTIME = LI.TRANTIME
                    LW.DISTANCE = LI.FEET/5280
                ENDPROCESS
                
                PHASE=DATAPREP
                    ;access/egress links
                    GENERATE,       
                        NTLEGMODE=991,
                        INCLUDELINK=(LI.NTL_MODE=1),
                        COST=LI.WALKTIME,
                        MAXCOST=999*500,
                        ONEWAY=T
                    ;transfer links
                    GENERATE,
                        NTLEGMODE=992,       
                        INCLUDELINK=(LI.NTL_MODE=2),
                        COST=LI.WALKTIME,
                        MAXCOST=999*500,
                        DIRECTLINK = 3,
                        FROMNODE=1-10000000,
                        TONODE=1-10000000    
                ENDPHASE
                
                READ FILE = @SKIM_MATRIX_DEF@

            ENDRUN

            ;clean up
            *del trn\mtc_transit_network_@TOKEN_PERIOD@.net

        EndDistributeMultistep
    
ENDLOOP

Wait4Files files = MTC_TRANSKIM1.script.end, MTC_TRANSKIM2.script.end, MTC_TRANSKIM3.script.end, MTC_TRANSKIM4.script.end, MTC_TRANSKIM5.script.end,
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t

;stop cluster nodes
*Cluster.exe MTC_TRANSKIM 1-5 close exit
