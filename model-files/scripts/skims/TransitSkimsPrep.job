; ----------------------------------------------------------------------------------------------------------------
;
; TransitSkims.job
;
; TP+ script to compute transit skims for five time periods. The script uses the following five time periods: 
;
;    (a) early AM, 3 am to 6 am
;    (b) AM peak period, 6 am to 10 am
;    (c) midday, 10 am to 3 pm
;    (d) PM peak period, 3 pm to 7 pm
;    (e) evening, 7 pm to 3 am the next day
;
; The first thing the script does is export the highway skims for each time period (as temporary csv files), so that TAZ->TAZ 
; times/distances can be captured by the drive-to-transit access procedure. Also, TAP connectors are exported as csv files so 
; that these can be identified by later (Python) scripts as belonging to specific transit modes.
;
; Next, a Python script is called to build the drive-to-transit drive access skims. These are developed from the highway
; skims (TAZ->TAZ), the MAZ->TAP skims, and the MAZ->TAZ correspondence file. Essentially, for each transit mode, the list of
; TAPs serving that mode are determined, and then the MAZs that are (walk) accessible to those TAPs. That list of MAZs gives a
; list of TAZs which can access those TAPs, and those are used as the (endpoints) for drive drive access, which is determined
; from the TAZ->TAZ skims. The output from this procedure is essentially a matrix with TAZs as the origins, TAPs as the
; destinations, and the values the MAZ used as an endpoint. We can't parse out just the shortest values because these may
; vary by time-of-day depending on which transit lines are available, and that information is not available by TAP directly.
;
; Also, the transit line files are rebuilt (via another Python script) to use the updated node-numbering in the transit network 
; (the TAPs need to be the first nodes (numerically) in the network, and all other nodes are renumbered).
;
; Finally, transit line skims are built. Because park-n-ride is dealt with outside of the skimming/assignment process, these skims
; are relatively straightforward, encompassing TAP->TAP movements, and only looking at walk access/egress/transfer. Walk access
; is provided through TAP->TAP walk-only connectors, which are discussed in more detail in the BuildTransitNetworks.job script.
;
; Three sets of skims are created: Set 1 - local bus only, Set 2 - all modes, and Set 3 - all modes with a high transfer penalty weight.
;
;       Mode class        Modes                Set 1     Set 2     Set 3
;       ----------------------------------------------------------------
;       Commuter Rail     130-139                n         y        y
;       Heavy Rail        120-129                n         y        y
;       Light Rail        110-119                n         y        y
;       Ferry             100-109                n         y        y
;       Express Bus       80-99                  n         y        y
;       Local Bus         1-79                   y         y        y
;
; Each transit skim mode is controlled by a factors file, kept in the /trn/ output directory (copied from the INPUTS/trn/tansit_support/
; directory). Each factor file specifies penalties, available modes (including access, egress and transfer modes), and transfer limits.
; The skims are run to keep only the best (shortest) path for each enumerated route, which greatly speeds up processing time. However, due
; to a (intermittent) bug in Cube, the default parameter on max transfers cannot be set at 5, but instead must be set at 2 (this bug causes
; networks with large zone counts to crash the skimming procedure sometimes).
;
; Currently the skimming procedure is highly distributed. The drive to transit input data scripts are distributed by time period, 
; and the actual transit skimming procedures are fully distributed by time period and mode. This means that 10 processes are initiated 
; currently. 
;
; Input: (1) A transit network for each time period, including updated link times based on highway assignment results
;        (2) A transit line file, listing all of the transit lines but keyed to the original (base) highway network's node numbers
;        (3) Highway skim matrices for each time period, output by the HwySkims.job script
;        (4) An MAZ->TAP walk access skim
;        (5) An MAZ->TAZ correspondence file
;        (6) An original node->new node correspondence file
;
; Output: (1) A (csv) drive-access matrix linking TAZ->TAP, as well as the intermediate MAZ for the path.
;         (2) A 15 table transit skim for each of the five time periods by skim-set, containing the following information:
;             (a) The generalized cost for the path
;             (b) The initial wait time, in minutes
;             (c) The transfer wait time, in minutes
;             (d) The transfer penalty, in minutes
;             (e) The boarding penalty, in minutes
;             (f) The number of transfers
;             (g) The total fare
;             (h) The transfer walk time
;             (i) The access/egress walk time
;             (j) The local bus time
;             (k) The express bus time 
;             (l) The ferry time 
;             (m) The light rail time 
;             (n) The commuter rail time 
;             (o) The "highest" mode used 
;
; version:  Travel Model Zed
; authors:  crf (2013 08) ; bts 06/11/14
;
;
; Updated to include transit system file for defining wait curves. Removed ferry (mode 104) from skim set 1 and included it 
; in SET2 and 3. Updated parameters in transit factor files. Also, build_walk_transfer_bypass_links.py file now sets distances 
; on walk transfer legs to eucledian distance 
; author: sn(11/7/2014)
; Updated to export ferry times as a separate matrix and to account for ferry as a distinct mode in BEST_MODE matrix.
; author: sn(5/5/2015)
; ----------------------------------------------------------------------------------------------------------------

SKIM_MATRICES = '%BASE_SCRIPTS%\block\skim_matrices.block'
SKIM_MATRIX_DEF = '%BASE_SCRIPTS%\block\skim_matrix_definitions.block'

;first, build transit drive access skims
;export highway skims as csv files
*Cluster.exe MTC_HWYSKIM 1-5 start exit

loop period = 1,5
   
   if (period = 1)   
      token_period = 'EA'
   elseif (period = 2)   
      token_period = 'AM'
   elseif (period = 3)   
      token_period = 'MD'
   elseif (period = 4)   
      token_period = 'PM'
   elseif (period = 5)   
      token_period = 'EV'
   endif

   ; do each time of day as a separate process
   DistributeMultistep processid = 'MTC_HWYSKIM', processNum = @period@
       
        RUN PGM=MATRIX 
            FILEI MATI = skims\HWYSKM@token_period@_taz.tpp
            FILEO MATO = skims\DA_@token_period@_taz_time.csv FORMAT=TXT DELIMITER=',' MO=1-3 PATTERN=IJM:V NAME=TIMEDA,DISTDA,BTOLLDA
            MW[1] = MI.1.TIMEDA
            MW[2] = MI.1.DISTDA
            MW[3] = MI.1.BTOLLDA
        ENDRUN
        
    EndDistributeMultistep
ENDLOOP

Wait4Files files = MTC_HWYSKIM1.script.end, MTC_HWYSKIM2.script.end, MTC_HWYSKIM3.script.end, MTC_HWYSKIM4.script.end, MTC_HWYSKIM5.script.end, 
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t

*Cluster.exe MTC_HWYSKIM 1-5 close exit

;export taps connectors from network
RUN PGM=NETWORK
    NETI = hwy\mtc_final_network_with_tolls.net
    LINKO = hwy\mtc_final_network_tap_links.csv FORMAT=SDF DELIMITER=',' INCLUDE=A,B
    NODEO = hwy\mtc_final_network_tap_nodes.csv FORMAT=SDF DELIMITER=',' INCLUDE=N,MODE
    
    PHASE = NODEMERGE
        IF ((N < 900000) & (N % 100000 > 90000))
            ;keep
        ELSE
            DELETE
        ENDIF
    ENDPHASE
  
    PHASE = LINKMERGE
        IF (CNTYPE='TAP' && (A < 900000 | B < 1000000)) ;drop split links
            ;keep
        ELSE
            DELETE
        ENDIF
    ENDPHASE
ENDRUN

;call python program to build transit drive access skims
*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\skims\build_drive_access_skims.py . %BASE_SCRIPTS%\block
IF (RETURNCODE > 0) abort
;*del skims\DA_*_taz_time.csv

; run script used to help consolidate taps
*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\skims\tap_lines.py
IF (RETURNCODE > 0) abort

;rebuild transit line file with new numbers
*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\skims\build_new_transit_line.py "trn\transitLines.lin" "trn\transitLines_new_nodes.lin" "hwy\mtc_transit_network_tap_to_node.txt"
IF (RETURNCODE > 0) abort

;now build transit times based on congested times from loaded network
;loop over time period
LOOP PERIOD = 1,5

    ; a two letter token is used for each time period
    IF (PERIOD = 1)   
        TOKEN_PERIOD = 'EA' 
    ELSEIF (PERIOD = 2)   
        TOKEN_PERIOD = 'AM' 
    ELSEIF (PERIOD = 3)   
        TOKEN_PERIOD = 'MD' 
    ELSEIF (PERIOD = 4)   
        TOKEN_PERIOD = 'PM'
    ELSEIF (PERIOD = 5)   
        TOKEN_PERIOD = 'EV'
    ENDIF
    
   ;convert transit network node numbers to originals
    RUN PGM=NETWORK
      NETI = hwy\mtc_transit_network_@TOKEN_PERIOD@.net
      NETO = hwy\mtc_transit_network_@TOKEN_PERIOD@_ORIGNODE.net
      
      PHASE = INPUT FILEI=NI.1
      
           N = OLD_NODE
           
      ENDPHASE
      
      PHASE = INPUT FILEI=LI.1
        A = OLD_A
        B = OLD_B
      ENDPHASE

      
    ENDRUN
    
    ;convert loaded auto network node numbers to originals
    RUN PGM=NETWORK
      NETI = hwy\AVGLOAD@TOKEN_PERIOD@_TAZ.net
      LINKO = hwy\AVGLOAD@TOKEN_PERIOD@_TAZ_ORIGNODE.CSV, FORMAT=SDF DELIMITER=',' INCLUDE=OLD_A,OLD_B,CTIM
      
     ENDRUN
      
    ; merge congested times and calculate transit time  
    RUN PGM=NETWORK
      NETI = hwy\mtc_transit_network_@TOKEN_PERIOD@_ORIGNODE.net
      LINKI[2] = hwy\AVGLOAD@TOKEN_PERIOD@_TAZ_ORIGNODE.CSV,VAR=A,B,CTIM
      NETO = hwy\mtc_transit_network_@TOKEN_PERIOD@_ORIGNODE_CONG.net
      
      MERGE RECORD = FALSE ; only keep transit network links
     
      PHASE = LINKMERGE
         
          CTIM = li.2.CTIM
          IF (CTIM>0 & (li.1.FT=1|li.1.FT=2))
            TRANTIME = CTIM    ; same as auto time for freeways
          ELSEIF (CTIM>0)
            TRANTIME = CTIM + ((FEET/5280.0) * 5.0 * (20.0 / 60.0))    ; TIME + 5 stops/mile * 20 secs/stop
        ENDIF

      ENDPHASE
    ENDRUN 

    ; recode network with new node numbers  
    RUN PGM=NETWORK
      NETI = hwy\mtc_transit_network_@TOKEN_PERIOD@_ORIGNODE_CONG.net
      NETO = hwy\mtc_transit_network_@TOKEN_PERIOD@_CONG.net
      
      PHASE = INPUT FILEI=NI.1
      
        N = NEW_NODE
           
      ENDPHASE
      
      PHASE = INPUT FILEI=LI.1
        A = A_NEW_NODE
        B = B_NEW_NODE
      ENDPHASE

      
    ENDRUN
    
ENDLOOP
