; ----------------------------------------------------------------------------------------------------------------
; zone_seq_net_builder.job
; 
; This script builds a sequential zone numbering system required by the CTRAMP models. Because the TAZ (and
; EXT), MAZ, and TAP network nodes all have "gaps" in them, they can't be used directly for two reasons:
;
;   1) CUBE requires sequential (and initial) numbering for zones when performing skims
;   2) CTRAMP's data structures increase based on the maximum zone number, and limiting this can significantly
;       decrease memory consumption for models with large zone counts.
;
; This script has two steps: the first builds separate zone sequences for TAZs, EXTs, MAZs, and TAPs, and stores
; them in a new network (which will be the base network for the subsequent model steps). The second step
; exports the node numbers (just for the zone nodes) which can then be used by other scripts as a correspondence
; between the two numbering schemes. Note that the 
;
; As a last step, this script calls zone_seq_disseminator.py, which is the python script which creates all
; of the necessary input files based on this updated sequential zone numbering.
;
; Inputs: mtc_final_network_base.net - the base network
; Outputs: mtc_final_network.net - the base network, with the following data columns added to the nodes:
;              TAZSEQ - the TAZ sequential node numbers
;              MAZSEQ - the MAZ sequential node numbers
;              TAPSEQ - the TAP sequential node numbers
;              EXTSEQ - the EXT sequential node numbers
;          mtc_final_network_zone_seq.csv - csv file holding the numbering correspondence, with the following columns (no header):
;              N - the original zone number in the network
;              TAZSEQ - the taz sequence number (0 if not a taz)
;              MAZSEQ - the maz sequence number (0 if not a maz)
;              TAPSEQ - the tap sequence number (0 if not a tap)
;              EXTSEQ - the ext sequence number (0 if not an ext; start at [maximum taz sequence number]+1)
;
; version:  Travel Model Zed
; authors:  crf (2013 11)
; ----------------------------------------------------------------------------------------------------------------

;taz includes externals
taz_selector = '(N < 900000) & (N % 100000 < 10000)'
maz_selector = '(N < 900000) & (N % 100000 < 90000) & (N % 100000 >= 10000)'
tap_selector = '(N < 900000) & (N % 100000 >= 90000)'
ext_selector = '(N < 1000000) & (N > 900000)'

;build the zone sequences and export to a new network
RUN PGM=NETWORK
    PAR  NODES=10000000
    NETI = "hwy\mtc_final_network_base.net"
    NETO = "hwy\mtc_final_network.net"
    
    PHASE = NODEMERGE
        IF (@taz_selector@)
            _i = _i + 1 
            TAZSEQ = _i
            MAZSEQ = 0
            TAPSEQ = 0
            EXTSEQ = 0
        ELSEIF (@maz_selector@)
            _j = _j + 1 
            TAZSEQ = 0
            MAZSEQ = _j
            TAPSEQ = 0
            EXTSEQ = 0
        ELSEIF (@tap_selector@)
            _k = _k + 1 
            TAZSEQ = 0
            MAZSEQ = 0
            TAPSEQ = _k
            EXTSEQ = 0
        ELSEIF (@ext_selector@)
            _m = _m + 1 
            TAZSEQ = 0
            MAZSEQ = 0
            TAPSEQ = 0
            EXTSEQ = _m + %TAZ_COUNT%
        ELSE
            TAZSEQ = 0
            MAZSEQ = 0
            TAPSEQ = 0
            EXTSEQ = 0
        ENDIF
    ENDPHASE
ENDRUN

;write out taz to node correspondence
RUN PGM=NETWORK
    PAR  NODES=10000000
    NETI = hwy\mtc_final_network.net
    NODEO = hwy\mtc_final_network_zone_seq.csv FORMAT=SDF, FORM=15.0 INCLUDE=N,TAZSEQ,MAZSEQ,TAPSEQ,EXTSEQ
    PHASE = NODEMERGE
        IF ((TAZSEQ > 0) | (MAZSEQ > 0) | (TAPSEQ > 0) | (EXTSEQ > 0))
            ;keep
        ELSE
            DELETE
        ENDIF
    ENDPHASE
ENDRUN

*"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\preprocess\zone_seq_disseminator.py .
