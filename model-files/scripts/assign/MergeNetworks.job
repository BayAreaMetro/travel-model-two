; ----------------------------------------------------------------------------------------------------------------
;
; MergeNetworks.job
;
; TP+ script to merge time-period-specific assignment results into a single TP+ and CSV network.  The combined network
; is not used by the model stream.  Variables are first given time-period-specific names in the first step of the
; script and then the five networks are merged. Daily volumes, delay, vehicle-miles traveled, and vehicle-hours
; traveled calculations are performed.  Note that delay is computed as the difference between congested time and free-flow time.
;
; The five time periods are as follows:(a) early AM, 3 am to 6 am; (b) AM peak period, 6 am to 10 am; (c) midday,
; 10 am to 3 pm; (d) PM peak period, 3 pm to 7 pm; and, (e) evening, 7 pm to 3 am the next morning.
;
; Each highway assignment tracks ten classes of vehicles plus preloaded volumes; the vehicle classes are  value-toll-paying
; and not-value-toll-paying classes of the following types: (a) single-occupant passenger vehicles; (b)two-occupant passenger
; vehicles; (c) three or more occupant passenger vehicles; (d) very small, small, and medium commercial vehicles; and,
; (e) large commercial vehicles (combination trucks).
;
; Input:  (1) Five time-period-specific highway networks with the following variables: (a) CTIM, which is the
;             congested travel time (in minutes), as computed by CalculateSpeeds.job; (b) TSIN, which is a switch,
;             a value of 1 indicating that the link is immune to congestion and has a fixed travel time (e.g. bridge
;             toll plazas); (c) DISTANCE, which is the link distance in miles; (d) VX_1, where X takes on the integers
;             one through ten, corresponding to the ten vehicle classes noted above -- the non-paying classes are
;             one through five and the value-toll-paying classes are six through ten; (e) other core variables
;             are not used in the script but are dumped to a CSV file; these variables are: (i) LANES, which is the
;             number of travel lanes; (ii) GL, which is the county code (1 - San Francisco, 2 - San Mateo, 3 -
;             Santa Clara, 4 - Alameda, 5 - Contra Cost, 6 - Solano, 7 - Napa, 8 - Sonoma, 9 - Marin, 0 - outside
;             the nine county Bay Area); (iii) USE, which is the link use code (see HwyAssign.job); (iv) FT, which
;             is the facility type (see HwyAssign.job); (v) AT, which is the area type (see HwyAssign.job); (vi) CAP,
;             which is the link capacity in vehicles per hour per lane; (vii) FFS, which is the link free-flow speed
;             in miles per hour; and, (viii) FFT, which is the link free-flow travel time in minutes.
;
; Output: (1) Five time-period-specific highway variables with the core variables noted above as well as the output
;             variables noted below (these variables are then merged into the single highway network noted below).
;         (2) A single highway network in TP+ and CSV format with the core variables noted above as well as the
;             following output variables: (a) ctimXX, where XX is a two-letter string indicating the time-of-day for
;             which the variable is specific (EA is early AM; AM is the AM peak period; MD is the midday; PM is the
;             PM peak period; and, EV is the evening), which is the congested travel time in minutes;
;             (b) cspdXX, where XX is again the two-letter time-of-day string, which is the congested travel speed
;             in miles per hour; (c) volXX_YYY, where XX is the two-letter time-of-day string (including 24hr, which
;             is the daily volume) and YYY is a two-or-three letter string indicating assigned vehicle class (da
;             is drive alone free; s2 is shared ride 2 free; s3 is shared ride 3 free; sm is small, medium, or
;             large trucks; hv is large, combination trucks; add a "T" to each of the three letter code for the
;             companion value-toll paying class; tot is the sum of all vehicle classes); (d) delayXX, which is the link
;             delay, which is the difference between the congested time and the free-flow travel time; (e) vmtXX,
;             which is the link vehicle-miles traveled; and, (f) vhtXX, which is the link vehicle-hours traveled.
;
; Notes:  (1) The assigned volumes stored in the assignment variable names (e.g. V1_1) are used by the
;             AverageNetworkVolumes.job.
;
; See also: (1) CalculateSpeeds.job, which creates the input networks to this script.
;           (2) HwyAssign.job, which performs the time-period-specific highway assignments.
;           (3) HwySkims.job, which uses the congested time to build level-of-service matrices for the next
;               model execution iteration.
;           (4) AverageNetworkVolumes.job, which uses the volumes in the output avgloadXX networks in the next
;               model execution iteration.
;
; version:  Travel Model Two
; authors:  dto (2010 08 10); gde (2009); crf (2014 02)
; revised jef (2016 08 09) to work with cube 6.4
;
; ----------------------------------------------------------------------------------------------------------------

; set the current iteration DOS token as a TP+ token
token_current_iteration = '%ITERATION%'

;start cluster nodes
*Cluster.exe MTC_HWYMERGE 1-5 start exit

; step one: create time-period-specific networks with readable variable names for use in next iteration
loop period = 1, 5

   ; a two letter token is used for each time period
   if (period = 1)
      token_period = 'EA'

   elseif (period = 2)
      token_period = 'AM'

   elseif (period = 3)
      token_period = 'MD'

   elseif (period = 4)
      token_period = 'PM'

   elseif (period = 5)
      token_period = 'EV'

   endif


   DistributeMultistep processid = 'MTC_HWYMERGE', processNum = @period@

   run pgm = network
;      PAR NODES=10000000

      ; read in the time-period-specific assigned and averaged (over iterations) network (see CalculateSpeeds.job)
      neti[1] = hwy\msaload@token_period@_taz.net
      LINKI[2] = hwy\msa@token_period@_speeds.csv VAR=A,B,CTIM

      ; write out the network that will be used to create level-of-service matrices for the next iteration (see HwySkims.job)
      neto = hwy\msamerge%ITERATION%_@token_period@.net

      ; set the v/c ratio
      vc@token_period@ = VC_1

      ; set the total capacity
      cap@token_period@ = CAP_TOTFAC

      ; set the freeflow speed
      ffs@token_period@ = FFS

      ; set the distance
      dist@token_period@ = FEET / 5280

      ; set the assignment-class-specific volumes: non-value-toll-paying classes
      vol@token_period@_da = VOL_DA
      vol@token_period@_s2 = VOL_S2
      vol@token_period@_s3 = VOL_S3
      vol@token_period@_sm = VOL_SM
      vol@token_period@_hv = VOL_HV

      ; set the assignment-class-specific volumes: value-toll-eligible classes
      vol@token_period@_daT = VOL_DAT
      vol@token_period@_s2T = VOL_S2T
      vol@token_period@_s3T = VOL_S3T
      vol@token_period@_smT = VOL_SMT
      vol@token_period@_hvT = VOL_HVT

	  ;set the assignment-class-specific volumes: preloaded volume
	  vol@token_period@_maz = VOL_MAZ

      ; set the assignment-class-specific volumes: total volume
      vol@token_period@_tot = vol@token_period@_da  + vol@token_period@_s2 +  vol@token_period@_s3  + vol@token_period@_sm  +  vol@token_period@_hv +
                              vol@token_period@_daT + vol@token_period@_s2T + vol@token_period@_s3T + vol@token_period@_smT + vol@token_period@_hvT +
							  vol@token_period@_maz

      ; compute delay, vehicle-miles traveled, and vehicle-hours traveled (ignore centroid connectors and other dummy links)
      IF ((FT!=8) & (FT!=99))

         ; delay is the congested time minus the free-flow time, weighted by the link volume, and converted from minutes to hours
         delay@token_period@ = (TIME_1 - FFT) * vol@token_period@_tot / 60.0

         ; vehicle-miles traveled is the distance weighted by the volume
         vmt@token_period@ = FEET * vol@token_period@_tot / 5280.0

         ; vehicle-hours traveled is the congested travel time (expressed here in minutes) weighted by the volume, and converted from minutes to hours
         vht@token_period@ = TIME_1 * vol@token_period@_tot / 60.0

         ctim@token_period@ = CTIM


         cspd@token_period@ = CSPD_1



      endif ; facility type is not six check


   endrun

   EndDistributeMultistep

endloop



Wait4Files files = MTC_HWYMERGE1.script.end, MTC_HWYMERGE2.script.end, MTC_HWYMERGE3.script.end, MTC_HWYMERGE4.script.end, MTC_HWYMERGE5.script.end,
           printfiles = merge, deldistribfiles = t, CheckReturnCode = t
;stop cluster nodes
*Cluster.exe MTC_HWYMERGE 1-5 close exit

; step two: build single network with all time-period-specific information included, as summarized in previous step
run pgm = hwynet

   ; read in the time-period-specific assigned and averaged (over iterations) networks (see CalculateSpeeds.job)
   neti[1] = hwy\msamerge%ITERATION%_EA.net
   neti[2] = hwy\msamerge%ITERATION%_AM.net
   neti[3] = hwy\msamerge%ITERATION%_MD.net
   neti[4] = hwy\msamerge%ITERATION%_PM.net
   neti[5] = hwy\msamerge%ITERATION%_EV.net

   ; output network includes time-period-specific and 24-hour volumes
   neto = hwy\msamerge%ITERATION%_temp.net,
           include = A,B,MODEL_LINK_ID,F_JNCTID,T_JNCTID,FRC,NAME,FREEWAY,TOLLRD,ONEWAY,KPH,MINUTES,CARRIAGE,LANES,RAMP,
                     SPEEDCAT,DISTANCE,FEET,ASSIGNABLE,CNTYPE,TRANSIT,USECLASS, TOLLBOOTH,FT,FFS,NUMLANES,HIGHWAYT,
                     B_CLASS,REPRIORITIZE,GRADE_CAT,PED_FLAG,BIKEPEDOK,RTEDIR,
                     TOLLEA_DA,TOLLEA_S2,TOLLEA_S3,TOLLEA_VSM,TOLLEA_SML,TOLLEA_MED,TOLLEA_LRG,
                     TOLLAM_DA,TOLLAM_S2,TOLLAM_S3,TOLLAM_VSM,TOLLAM_SML,TOLLAM_MED,TOLLAM_LRG,
                     TOLLMD_DA,TOLLMD_S2,TOLLMD_S3,TOLLMD_VSM,TOLLMD_SML,TOLLMD_MED,TOLLMD_LRG,
                     TOLLPM_DA,TOLLPM_S2,TOLLPM_S3,TOLLPM_VSM,TOLLPM_SML,TOLLPM_MED,TOLLPM_LRG,
                     TOLLEV_DA,TOLLEV_S2,TOLLEV_S3,TOLLEV_VSM,TOLLEV_SML,TOLLEV_MED,TOLLEV_LRG,
                     PEMSID,SHSTGEOMETRYID,AT,CAPCLASS,FFT,A_NEW_NODE,OLD_A,B_NEW_NODE,OLD_B,
                     capEA,vcEA,volEA_da,volEA_s2,volEA_s3,volEA_sm,volEA_hv,volEA_daT,volEA_s2T,volEA_s3T,volEA_smT,volEA_hvT,volEA_maz,volEA_tot,delayEA,distEA,vmtEA,vhtEA,ctimEA,cspdEA,ffsEA,
                     capAM,vcAM,volAM_da,volAM_s2,volAM_s3,volAM_sm,volAM_hv,volAM_daT,volAM_s2T,volAM_s3T,volAM_smT,volAM_hvT,volAM_maz,volAM_tot,delayAM,distAM,vmtAM,vhtAM,ctimAM,cspdAM,ffsAM,
                     capMD,vcMD,volMD_da,volMD_s2,volMD_s3,volMD_sm,volMD_hv,volMD_daT,volMD_s2T,volMD_s3T,volMD_smT,volMD_hvT,volMD_maz,volMD_tot,delayMD,distMD,vmtMD,vhtMD,ctimMD,cspdMD,ffsMD,
                     capPM,vcPM,volPM_da,volPM_s2,volPM_s3,volPM_sm,volPM_hv,volPM_daT,volPM_s2T,volPM_s3T,volPM_smT,volPM_hvT,volPM_maz,volPM_tot,delayPM,distPM,vmtPM,vhtPM,ctimPM,cspdPM,ffsPM,
                     capEV,vcEV,volEV_da,volEV_s2,volEV_s3,volEV_sm,volEV_hv,volEV_daT,volEV_s2T,volEV_s3T,volEV_smT,volEV_hvT,volEV_maz,volEV_tot,delayEV,distEV,vmtEV,vhtEV,ctimEV,cspdEV,ffsEV



   ; combine the records of the time-period-specific assignments
   merge record = t

   ; linkmerge phase start
   phase = linkmerge

      ; combine the assignment results to build 24-hour volumes
      vol24hr_da  = volEA_da  + volAM_da  + volMD_da  + volPM_da  + volEV_da
      vol24hr_s2  = volEA_s2  + volAM_s2  + volMD_s2  + volPM_s2  + volEV_s2
      vol24hr_s3  = volEA_s3  + volAM_s3  + volMD_s3  + volPM_s3  + volEV_s3
      vol24hr_sm  = volEA_sm  + volAM_sm  + volMD_sm  + volPM_sm  + volEV_sm
      vol24hr_hv  = volEA_hv  + volAM_hv  + volMD_hv  + volPM_hv  + volEV_hv

      vol24hr_daT = volEA_daT + volAM_daT + volMD_dat + volPM_daT + volEV_daT
      vol24hr_s2T = volEA_s2T + volAM_s2T + volMD_s2t + volPM_s2T + volEV_s2T
      vol24hr_s3T = volEA_s3T + volAM_s3T + volMD_s3t + volPM_s3T + volEV_s3T
      vol24hr_smT = volEA_smT + volAM_smT + volMD_smt + volPM_smT + volEV_smT
      vol24hr_hvT = volEA_hvT + volAM_hvT + volMD_hvt + volPM_hvt + volEV_hvT

	  vol24hr_maz = volEA_maz + volAM_maz + volMD_maz + volPM_maz + volEV_maz

      vol24hr_tot = volEA_tot + volAM_tot + volMD_tot + volPM_tot + volEV_tot

      ; compute delay, vehicle-miles traveled, and vehicle-hours traveled (ignore centroid connectors and other dummy links)
      IF ((FT!=8) & (FT!=99))

         ; vehicle delay is the difference between congested time and free flow time, times number of vehicles
         delay24hr = delayEA + delayAM + delayMD + delayPM + delayEV

         ; vehicle-miles traveled is the distance weighted by the volume
         vmt24hr = vmtEA + vmtAM + vmtMD + vmtPM + vmtEV

         ; vehicle-hours traveled is the congested travel time (expressed here in minutes) weighted by the volume
         vht24hr = vhtEA + vhtAM + vhtMD + vhtPM + vhtEV

      endif ; facility type check

   endphase
endrun

;copy these back to correct network values
RUN PGM=NETWORK
;    PAR  NODES=10000000
    NETI = hwy\msamerge%ITERATION%_temp.net
    NETO = hwy\msamerge%ITERATION%.net

    PHASE = INPUT FILEI=NI.1
        N = OLD_NODE
    ENDPHASE

    PHASE = INPUT FILEI=LI.1
        A = OLD_A
        B = OLD_B
    ENDPHASE

    ZONES = 1
ENDRUN

;*DEL hwy\msamerge%ITERATION%_temp.net
;*DEL hwy\msamerge%ITERATION%_EA.net
;*DEL hwy\msamerge%ITERATION%_AM.net
;*DEL hwy\msamerge%ITERATION%_MD.net
;*DEL hwy\msamerge%ITERATION%_PM.net
;*DEL hwy\msamerge%ITERATION%_EV.net


; step three: dump the network to a csv file
run pgm = network
;    PAR  NODES=10000000

   neti = hwy\msamerge%ITERATION%.net

   phase = linkmerge

      if (_doOnce = 0)

         list = "a,",
                "b,",
                "model_link_id,",
                "distance,",
                "feet,",
                "numlanes,",
                "cntype,",
                "useclass,",
                "ft,",
                "at,",
                "capclass,",
                "ffs,",
                "fft,",
				"pemsid,",
				"shstgeometryid,",
                "cspdEA,",
                "cspdAM,",
                "cspdMD,",
                "cspdPM,",
                "cspdEV,",
                "volEA_tot,",
                "volAM_tot,",
                "volMD_tot,",
                "volPM_tot,",
                "volEV_tot,",
		"vol24hr_tot,",
                "capEA,",
                "capAM,",
                "capMD,",
                "capPM,",
                "capEV,",
                "ctimEA,",
                "ctimAM,",
                "ctimMD,",
                "ctimPM,",
                "ctimEV,",
                "vcEA,",
                "vcAM,",
                "vcMD,",
                "vcPM,",
                "vcEV",
                file = hwy\msamerge%ITERATION%.csv
         _doOnce = 1
      endif
      list = A(8.0), ",",
             B(8.0), ",",
             MODEL_LINK_ID(8.0), ",",
             DISTANCE(8.2), ",",
             FEET(8.2), ",",
             NUMLANES(8.2),",",
             CNTYPE,",",
             USECLASS(4.0),",",
             FT(4.0),",",
             AT(4.0),",",
             CAPCLASS(8.0),",",
             FFS(8.2),",",
             FFT(8.2),",",
			 PEMSID(8.0),",",
			 SHSTGEOMETRYID,",",
             cspdEA(8.2),",",
             cspdAM(8.2),",",
             cspdMD(8.2),",",
             cspdPM(8.2),",",
             cspdEV(8.2),",",
             volEA_tot(12.2),",",
             volAM_tot(12.2),",",
             volMD_tot(12.2),",",
             volPM_tot(12.2),",",
             volEV_tot(12.2),",",
             vol24hr_tot(12.2),",",
             capEA(8.2),",",
             capAM(8.2),",",
             capMD(8.2),",",
             capPM(8.2),",",
             capEV(8.2),",",
             ctimEA(8.2),",",
             ctimAM(8.2),",",
             ctimMD(8.2),",",
             ctimPM(8.2),",",
             ctimEV(8.2),",",
             vcEA(8.4),",",
             vcAM(8.4),",",
             vcMD(8.4),",",
             vcPM(8.4),",",
             vcEV(8.4),
             file = hwy\msamerge%ITERATION%.csv
   endphase
endrun
