; ----------------------------------------------------------------------------------------------------------------
;
; HwyAssign.job
;
; TP+ script to assign vehicle and truck trips to the highway network.  Assignments are performed for each of the 
; following time periods: (a) early AM, 3 am to 6 am; (b) AM peak period, 6 am to 10 am; (c) midday, 10 am to 3 pm; 
; (d) PM peak period, 3 pm to 7 pm; and, (e) evening, 7 pm to 3 am.  
;
; Ten vehicle classes are tracked in each assignment, with value-toll-eligible and not-value-toll-eligible classes
; as follows:
;      (1) drive alone, no value toll
;      (2) shared ride 2, no value toll
;      (3) shared ride 3+, no value toll
;      (4) very small, small, and medium trucks, no value toll
;      (5) large trucks, no value toll
;      (6) drive alone, value toll eligible
;      (7) shared ride 2, value toll eligible
;      (8) shared ride 3+, value toll eligible
;      (9) very small, small, and medium trucks, value toll eligible
;     (10) large trucks, value toll eligible
;
; Four types of trips are assigned, as follows: (a) personal, inter-regional travel; (b) personal, intra-regional
; travel; (c) commercial travel; and, (d) air passenger travel.  Separate trip tables are read in by the script for 
; each of these travel types. 
;
; Input:  (A) A highway network containing the following fields: (a) DISTANCE (miles); (b) FT, which is the facility type
;         a code which determines the links' free-flow speed, capacity, and volume/speed relationship; (c) TOLLCLASS,
;         which is a code, less than FIRSTVALUE - 1 (see hwyParam.block) indicates the link is a bridge toll 
;         and a value higher than FIRSTVALUE indicates the link is a value toll; (d) OT, which is the observed
;         travel time for links immune to congestion (generally used to represent toll booth delay and centroid
;         connector travel time); (e) FFS,which is the free flow speed (in miles per hour); (f) TSIN, which is a 
;         code, a value of one indicates the link is immune to congestion and has a fixed time coded in the OT 
;         field; (g) CAPCLASS, which is a speed/capacity look-up code (see the "SpeedCapacity.block" file); and
;         (h) TOLLXX_CC, where XX is a two-character time-period code and CC is a two or three-character vehicle
;         class code, and the value is the dollar value of the toll to go through the link in year 2000 dollars.
;
; Output: (A) Five loaded highway networks, one for each time period, containing the following data for each link:
;              (1)  V_1 - volume, in passenger car equivalents (if assigned again, volume would be labeled V_2);
;              (2)  TIME_1 - congested time, in minutes
;              (3)  VC_1 - volume to capacity ratio
;              (4)  CSPD_1 - congested speed, in miles per hour
;              (5)  VDT_1 - vehicle distance traveled, in vehicle miles
;              (6)  VHT_1 - vehicle hours traveled
;              (7)  V1_1  - volume of vehicles in assigment class one: drive alone, no value toll
;              (8)  V2_1  - volume of vehicles in assigment class two: two-occupant vehicles, no value toll
;              (9)  V3_1  - volume of vehicles in assigment class three: three-or-more-occupant vehicles, no value toll
;              (10) V4_1  - volume of vehicles in assigment class four: very small, small, and medium trucks, no value toll
;              (11) V5_1  - volume of vehicles in assigment class five: combination trucks, no value toll 
;              (12) V6_1  - volume of vehicles in assigment class six: drive alone, value toll
;              (13) V7_1  - volume of vehicles in assigment class seven: two-occupant vehicles, value toll
;              (14) V8_1  - volume of vehicles in assigment class eight: three-or-more-occupant vehicles, value toll
;              (15) V9_1  - volume of vehicles in assigment class nine: very small, small, and medium trucks, value toll
;              (16) V10_1 - volume of vehicles in assigment class ten: combination trucks, value toll 
;              (17) VT_1 and VXT_1, where X is 1 through 10, are the b-to-a volumes
;                              
;
; Notes:  (1) Four types of commercial vehicle demand is estimated: very small, small, medium, and large commercial
;         trucks.  Two classes of commercial trucks are assigned: (1) very small, small, and medium; and, (2)
;         large trucks.  The characteristics of the small trucks (value of time, toll) is used in the assignment
;         of the very small, small, and medium truck class. 
;     (2) Facility type codes are as follows: (i) freeway-to-freeway ramp; (ii) freeway; (iii) expressway; (iv)
;         collector; (v) freeway ramp; (vi) centroid connector/dummy link; (vii) major arterial; (viii) metered
;         ramp; (ix) freeways with ITS treatments and Golden Gate Bridge; (x) expressways and arterials with
;         ITS treatments. 
;     (3) Area type codes are as follows: (0) core; (i) central business district; (ii) urban business district;
;         (iii) urban; (iv) suburban; (v) rural. 
;     (4) The capacity class is computed as fifteen times area type plus facility type. 
;
; See also: (1) CreateFiveHighwayNetworks.job, which creates the time-specific networks;
;       (2) SetTolls.job, which sets the time- and class-specific bridge and value tools. 
;
; version:  Travel Model Zed
; authors:  dto (2011 12 13); dto (2010 08 10); gde (2009); crf (2014 02 07)
;
;
; ----------------------------------------------------------------------------------------------------------------

;read max cost parameters
;read file = %BASE_SCRIPTS%\block\maxCosts.block
;read file = %BASE_SCRIPTS%\block\hwyparam.block
hwy_block_param = '%BASE_SCRIPTS%\block\hwyparam.block'
speed_cap_block_param = '%BASE_SCRIPTS%\block\SpeedCapacity_1hour.block'
free_flow_block_param = '%BASE_SCRIPTS%\block\FreeFlowSpeed.block'
vdf_block_param = '%BASE_SCRIPTS%\block\SpeedFlowCurve.block'


;start cluster nodes
*Cluster.exe MTC_HWYASN 1-31 start exit


; do, more or less, the same skim procedure for each of the five time periods
loop period = 1,3
  
    ; a two letter token is used for each time period
    if (period = 1)   
      token_period = 'EA'   
      intrastep_range = '2-6'
      ;switch to use time penalties for transferring to hov lane
      ;token_hov_xfer_pen = '0'
      ;hours for the assignment period
      token_capfac = 'parameters capfac = 3'
      token_capfacnum = 3
      ;convergence/stopping criteria
      token_relativegap = 'parameters relativegap = 0.005'
      token_maxiters = 'parameters maxiters = 30'
    elseif (period = 2)   
      token_period = 'MD'    
      intrastep_range = '7-26'
      ;token_hov_xfer_pen = '0'
      token_capfac = 'parameters capfac = 5'
      token_capfacnum = 5
      token_relativegap = 'parameters relativegap = 0.005'
      token_maxiters = 'parameters maxiters = 30'
    elseif (period = 3)   
      token_period = 'EV'
      intrastep_range = '27-31'
      ;token_hov_xfer_pen = '0'
      token_capfac = 'parameters capfac = 8'
      token_capfacnum = 8
      token_relativegap = 'parameters relativegap = 0.005'
      token_maxiters = 'parameters maxiters = 30'
    endif
    

    ; do each time of day as a separate process
    DistributeMultistep processid = 'MTC_HWYASN', processNum = @period@
    
	; comment out these steps when trimming the network manually prior to assignment
	; this is just a temporary step, network should be whole from beginning of process
    
    ;in case mazmazvol already exist
    run pgm = network
        NETI = hwy\avgload@token_period@_taz.net
        NETO = hwy\avgload@token_period@_taz_temp1.net
        
        PHASE=LINKMERGE
            MAZMAZVOL = 0.0
        ENDPHASE
    endrun
    	
    ;transfer maz->maz volumes to new zone system
    *"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\assign\transfer_maz_maz_vols.py . @token_period@
    
    ;merge in maz->maz vols
    run pgm = network
        NETI = hwy\avgload@token_period@_taz_temp1.net
        LINKI[2] = hwy\maz_preload_@token_period@_seq_vols.csv VAR=A,B,MAZMAZVOL
        NETO = hwy\avgload@token_period@_taz_temp2.net
		
        PHASE=LINKMERGE
	     		MAZMAZVOL=LI.2.MAZMAZVOL
	       ENDPHASE
    endrun
    
    
     ; *DEL hwy\avgload@token_period@_taz.net
     ; *copy hwy\avgload@token_period@_taz_temp2.net hwy\avgload@token_period@_taz.net
     ; *DEL hwy\avgload@token_period@_taz_temp2.net
	 
    ;Delete links for assignment and add in speeds and capacities
    run pgm = network
        NETI = hwy\avgload@token_period@_taz_temp2.net
        NETO = hwy\avgload@token_period@_taz_delete.net
	
        PHASE=LINKMERGE

	;
        ; Capacity and Speed Lookups
        ;
        ; Set based on CAPCLASS
	;
        
	LOOKUP  NAME= Cap,LOOKUP[1]=1,RESULT=2,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        CAP_HRLN = Cap(1,CAPCLASS)
	CAP_LANE = CAP_HRLN * @token_capfacnum@
	CAP_TOTAL = CAP_LANE * NUMLANES
	CAP_TOTFAC = CAP_TOTAL * CAP_FAC

;F&P added if statement to only use speed lookup if inside Marin (Marin=1) and not a freeway (FT<>2)
      IF (MARIN = 1 && FT <> 2)    
        LOOKUP  NAME= Spd,LOOKUP[2]=1,RESULT=3,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        SPEED = Spd(2,CAPCLASS)
	FFS = SPEED * SPD_FAC
      ELSE
	FFS = FFS * SPD_FAC
      ENDIF
	
        if (FFS > 0)
        FFT = (60.0 / 5280.0) * FEET / FFS ; (60 minutes / 1 hour) * (1 mile / 5280 feet) * (feet) * (miles / hour) => minutes
        else
        FFT = (60.0 / 5280.0) * FEET / 25 ; put a default of 25 mph
	endif

	IF(DELETE=1) DELETE
        
        ENDPHASE
    endrun
    
     run pgm = highway
        DistributeIntrastep processid = 'MTC_HWYASN', processlist = @intrastep_range@ saveprn = f
    
        ; time-specific input highway network
        neti = hwy\avgload@token_period@_taz_delete.net

        ; household travel demand
        mati[1] = ctramp_output\TAZ_Demand_@token_period@.mat

        ; internal/external travel demand
        mati[2] = nonres\tripsIx@token_period@.tpp 
        
        ; commercial travel demand
        mati[3] = nonres\tripsTrk@token_period@.tpp
        
        ; air passenger travel demand
        mati[4] = nonres\tripsAirPax@token_period@.mtx

        ; loaded time-specific highway network
        neto = hwy\load@token_period@.net

        ; set the assignment parameters -- equilibrium assignment, bi-conjugate
        parameters combine = equi, enhance = 2            

        ; set the assignment parameters -- internal zones + ?? external zones
        parameters zones = %TAZ_EXTS_COUNT%
    
        ; set the assignment parameters
        @token_maxiters@ 
        @token_relativegap@ 

        ; set the assignment parameters -- other closure criteria (do not use)
        parameters gap = 0, aad = 0, raad = 0, rmse = 0

        ; set the number of hours in the assignment (see the loop tokens)
        @token_capfac@ 

        ; hwyParam.bock contains variables used in the remainder of the script, particularly in the generalized cost expressions
        read file = @hwy_block_param@

        ; read in the speed/capacity table
        ;read file = @speed_cap_block_param@ - removed by F&P

        ; set the working variables

         phase = linkread
         
            ; the time variable is congested time specific to each time period
            lw.time = li.CTIM 
            
            ; distance is coded as "distance" in the networks
            
            IF (li.FEET = 0)
                lw.dist = 1.0 / 5280.0
                distance = 1.0 / 5280.0
            ELSE
                lw.dist = li.FEET / 5280.0
                distance = li.FEET / 5280.0
            ENDIF
            
            t0 = li.FFT
            t1 = li.CTIM
            
            ; facility type is the linkclass (linkclass needs to be defined, but it's not used)
            linkclass = li.FT 

            ; TOLLBOOTH set to distinguish value tolls from bridge tolls
            lw.tollclass = li.TOLLBOOTH

            ; the speed/capacity table and the computation of the volume/delay function parameter (see FreeFlowSpeed.block) uses the capacity class code
            ; which is area type * 15 + facility type - modified by F&P
            ;lw.capclass = li.CAPCLASS - removed by F&P

            ; free-flow speed is used in the volume/delay functions
            ffs = li.FFS

	    ; capacity
	    c = li.CAP_TOTFAC
            
            ; free flow time
            fft = li.FFT

            ; link capacity is a function of the number of lanes
            ;lanes = li.NUMLANES

            read file = @free_flow_block_param@
          
            ; set the generalized cost, which is the combination of three tokens
         
            lw.gencost_da  = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_DA)
            ;lw.gencost_s2 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare) + @token_hov_xfer_pen@
            ;lw.gencost_s3 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare) + @token_hov_xfer_pen@
            lw.gencost_s2 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare)
            lw.gencost_s3 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare)
            lw.gencost_vsm = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_VSM)
            lw.gencost_sml = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_SML)
            lw.gencost_med = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_MED)
            lw.gencost_lrg = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_LRG)
                              
              
            ; the USE variable defines what type of vehicles can use the roadway
           
            ; Group 23 defines HOV 2 and 3+ facilities
            if (li.USECLASS = 2,3)  addtogroup = 23
           
            ; Group 3 defines HOV 3+ facilities
            if (li.USECLASS = 3) addtogroup = 3
            
            ; Group 4 defines facilities not available to trucks
            if (li.USECLASS = 2,3,4) addtogroup = 4
                       
            ; Group 11 defines the value toll links the non-value-toll-paying users are prohibited from using
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_DA > 0) addtogroup = 11
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S2 > 0) addtogroup = 12
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S3 > 0) addtogroup = 13

            ; create the link exclusion classes -- value toll links for commercial vehicles (use SML for very small, small, and medium)
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_VSM > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_SML > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_MED > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_LRG > 0) addtogroup = 15
            
         endphase


        ; set the pathload parameters
        phase = iloop

            ; no value toll paying classes first

            ; drive alone, no value toll, exclude drive alone value toll and HOV facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_da, excludegrp = 11, 23, vol[1] = mi.1.SOV_GP_@token_period@ + mi.2.da + mi.4.da

            ; shared ride 2, no value toll, exclude sr2 value toll and HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[2] =  (mi.1.SR2_GP_@token_period@ + mi.1.SR2_HOV_@token_period@) / sr2costShare + mi.2.sr2 + mi.4.sr2

            ; shared ride 3+, no value toll, exclude sr3 value toll facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s3, excludegrp = 13, vol[3] = (mi.1.SR3_GP_@token_period@ + mi.1.SR3_HOV_@token_period@) / sr3costShare + mi.2.sr3 + mi.4.sr3

            ; very small, small, and medium trucks, no value toll, exclude small truck value toll facilities and HOV facilities
            pathload path = lw.gencost_sml, excludegrp = 14, 23, vol[4] = mi.3.vstruck + mi.3.struck + mi.3.mtruck

            ; large trucks, no value toll, exclude large truck toll facilities, HOV facilities, and no commercial truck facilities 
            pathload path = lw.gencost_lrg, excludegrp = 15, 4, vol[5] = mi.3.ctruck

            ; value toll paying classes second

            ; drive alone, value toll paying, exclude HOV facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_da, excludegrp = 23, vol[6] = mi.1.SOV_PAY_@token_period@ + mi.2.datoll + mi.4.datoll

            ; shared ride 2, value toll paying, exclude HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s2, excludegrp = 3, vol[7] = mi.1.SR2_PAY_@token_period@ / sr2costShare + mi.2.sr2toll + mi.4.sr2toll

            ; shared ride 3+, value toll paying, no exclusions, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s3, vol[8] = mi.1.SR3_PAY_@token_period@ / sr3costShare + mi.2.sr3toll + mi.4.sr3toll

            ; very small, small, and medium trucks, value toll paying, excluded from HOV facilities, use the small truck generalized cost
            pathload path = lw.gencost_sml, excludegrp = 23, vol[9]= mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll

            ; large trucks, value toll paying, excluded from HOV facilities and no commercial truck facilities
            pathload path = lw.gencost_lrg, excludegrp = 4, vol[10] = mi.3.ctrucktoll

        endphase 
    
      ; set adjust parameters (volume delay functions)
      phase = adjust
 
         ; very small, small, and medium trucks have a passenger car equivalent of, on average 1.0, large trucks see HwyParam.block for PCE
         function v = vol[1] + vol[2] + vol[3] + vol[4] + trkpce*vol[5] + vol[6] + vol[7] + vol[8] + vol[9] + trkpce*vol[10] + li.MAZMAZVOL
           
         ; the volume delay functions are housed in the SpeedFlowCurve.block file
         read file = @vdf_block_param@
        
         ; set the generalized cost functions (same as before, only now we start with "time")
         lw.gencost_da  = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_DA)
         ;lw.gencost_s2 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare) + @token_hov_xfer_pen@
         ;lw.gencost_s3 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare) + @token_hov_xfer_pen@
         lw.gencost_s2 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare)
         lw.gencost_s3 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare)
         lw.gencost_vsm = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_VSM)
         lw.gencost_sml = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_SML)
         lw.gencost_med = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_MED)
         lw.gencost_lrg = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_LRG)
         
      endphase
      
   endrun  
   

   
      
   EndDistributeMultistep

 
endloop ; time period loop

Wait4Files files = MTC_HWYASN1.script.end, MTC_HWYASN2.script.end, MTC_HWYASN3.script.end, 
          PrintFiles = merge, DelDistribFiles = t, CheckReturnCode = t

*Cluster.exe MTC_HWYASN 1-31 close exit


;start cluster nodes
*Cluster.exe MTC_HWYASN 1-31 start exit


; do, more or less, the same skim procedure for each of the five time periods
loop period = 1,2
  
    ; a two letter token is used for each time period
    if (period = 1)   
      token_period = 'AM'    
      intrastep_range = '2-15'
      ;token_hov_xfer_pen = 'li.HOVXPEN'
      token_capfac = 'parameters capfac = 3.65'
      token_capfacnum = 3.65
      token_relativegap = 'parameters relativegap = 0.005'
      token_maxiters = 'parameters maxiters = 30'
    elseif (period = 2)   
      token_period = 'PM'
      intrastep_range = '16-31'
      ;token_hov_xfer_pen = 'li.HOVXPEN'
      token_capfac = 'parameters capfac = 3.65'
      token_capfacnum = 3.65
      token_relativegap = 'parameters relativegap = 0.005'
      token_maxiters = 'parameters maxiters = 30'
    endif
    

    ; do each time of day as a separate process
    DistributeMultistep processid = 'MTC_HWYASN', processNum = @period@
    
	; comment out these steps when trimming the network manually prior to assignment
	; this is just a temporary step, network should be whole from beginning of process
    
    ;in case mazmazvol already exist
    run pgm = network
        NETI = hwy\avgload@token_period@_taz.net
        NETO = hwy\avgload@token_period@_taz_temp1.net
        
        PHASE=LINKMERGE
            MAZMAZVOL = 0.0
        ENDPHASE
    endrun
    	
    ;transfer maz->maz volumes to new zone system
    *"%PYTHON_PATH%\python.exe" %BASE_SCRIPTS%\assign\transfer_maz_maz_vols.py . @token_period@
    
    ;merge in maz->maz vols
    run pgm = network
        NETI = hwy\avgload@token_period@_taz_temp1.net
        LINKI[2] = hwy\maz_preload_@token_period@_seq_vols.csv VAR=A,B,MAZMAZVOL
        NETO = hwy\avgload@token_period@_taz_temp2.net
		
        PHASE=LINKMERGE
	     		MAZMAZVOL=LI.2.MAZMAZVOL
	       ENDPHASE
    endrun
    
    
     ; *DEL hwy\avgload@token_period@_taz.net
     ; *copy hwy\avgload@token_period@_taz_temp2.net hwy\avgload@token_period@_taz.net
     ; *DEL hwy\avgload@token_period@_taz_temp2.net
	 
    ;Delete links for assignment and add in speeds and capacities
    run pgm = network
        NETI = hwy\avgload@token_period@_taz_temp2.net
        NETO = hwy\avgload@token_period@_taz_delete.net
	
        PHASE=LINKMERGE

	;
        ; Capacity and Speed Lookups
        ;
        ; Set based on CAPCLASS
	;
        
	LOOKUP  NAME= Cap,LOOKUP[1]=1,RESULT=2,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        CAP_HRLN = Cap(1,CAPCLASS)
	CAP_LANE = CAP_HRLN * @token_capfacnum@
	CAP_TOTAL = CAP_LANE * NUMLANES
	CAP_TOTFAC = CAP_TOTAL * CAP_FAC
    
;F&P added if statement to only use speed lookup if inside Marin (Marin=1) and not a freeway (FT<>2)
      IF (MARIN = 1 && FT <> 2)    
        LOOKUP  NAME= Spd,LOOKUP[2]=1,RESULT=3,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        SPEED = Spd(2,CAPCLASS)
	FFS = SPEED * SPD_FAC
      ELSE
	FFS = FFS * SPD_FAC
      ENDIF
	
        if (FFS > 0)
        FFT = (60.0 / 5280.0) * FEET / FFS ; (60 minutes / 1 hour) * (1 mile / 5280 feet) * (feet) * (miles / hour) => minutes
        else
        FFT = (60.0 / 5280.0) * FEET / 25 ; put a default of 25 mph
	endif

	IF(DELETE=1) DELETE
        
        ENDPHASE
    endrun
    
     run pgm = highway
        DistributeIntrastep processid = 'MTC_HWYASN', processlist = @intrastep_range@ saveprn = f
    
        ; time-specific input highway network
        neti = hwy\avgload@token_period@_taz_delete.net

        ; household travel demand
        mati[1] = ctramp_output\TAZ_Demand_@token_period@.mat

        ; internal/external travel demand
        mati[2] = nonres\tripsIx@token_period@.tpp 
        
        ; commercial travel demand
        mati[3] = nonres\tripsTrk@token_period@.tpp
        
        ; air passenger travel demand
        mati[4] = nonres\tripsAirPax@token_period@.mtx

        ; loaded time-specific highway network
        neto = hwy\load@token_period@.net

        ; set the assignment parameters -- equilibrium assignment, bi-conjugate
        parameters combine = equi, enhance = 2            

        ; set the assignment parameters -- internal zones + ?? external zones
        parameters zones = %TAZ_EXTS_COUNT%
    
        ; set the assignment parameters
        @token_maxiters@ 
        @token_relativegap@ 

        ; set the assignment parameters -- other closure criteria (do not use)
        parameters gap = 0, aad = 0, raad = 0, rmse = 0

        ; set the number of hours in the assignment (see the loop tokens)
        @token_capfac@ 

        ; hwyParam.bock contains variables used in the remainder of the script, particularly in the generalized cost expressions
        read file = @hwy_block_param@

        ; read in the speed/capacity table
        ;read file = @speed_cap_block_param@ - removed by F&P

        ; set the working variables

         phase = linkread
         
            ; the time variable is congested time specific to each time period
            lw.time = li.CTIM 
            
            ; distance is coded as "distance" in the networks
            
            IF (li.FEET = 0)
                lw.dist = 1.0 / 5280.0
                distance = 1.0 / 5280.0
            ELSE
                lw.dist = li.FEET / 5280.0
                distance = li.FEET / 5280.0
            ENDIF
            
            t0 = li.FFT
            t1 = li.CTIM
            
            ; facility type is the linkclass (linkclass needs to be defined, but it's not used)
            linkclass = li.FT 

            ; TOLLBOOTH set to distinguish value tolls from bridge tolls
            lw.tollclass = li.TOLLBOOTH

            ; the speed/capacity table and the computation of the volume/delay function parameter (see FreeFlowSpeed.block) uses the capacity class code
            ; which is area type * 15 + facility type - modified by F&P
            ;lw.capclass = li.CAPCLASS - removed by F&P

            ; free-flow speed is used in the volume/delay functions
            ffs = li.FFS

	    ; capacity
	    c = li.CAP_TOTFAC
            
            ; free flow time
            fft = li.FFT

            ; link capacity is a function of the number of lanes
            ;lanes = li.NUMLANES

            read file = @free_flow_block_param@
          
            ; set the generalized cost, which is the combination of three tokens
         
            lw.gencost_da  = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_DA)
            ;lw.gencost_s2 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare) + @token_hov_xfer_pen@
            ;lw.gencost_s3 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare) + @token_hov_xfer_pen@
            lw.gencost_s2 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare)
            lw.gencost_s3 = lw.time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare)
            lw.gencost_vsm = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_VSM)
            lw.gencost_sml = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_SML)
            lw.gencost_med = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_MED)
            lw.gencost_lrg = lw.time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_LRG)
                              
              
            ; the USE variable defines what type of vehicles can use the roadway
           
            ; Group 23 defines HOV 2 and 3+ facilities
            if (li.USECLASS = 2,3)  addtogroup = 23
           
            ; Group 3 defines HOV 3+ facilities
            if (li.USECLASS = 3) addtogroup = 3
            
            ; Group 4 defines facilities not available to trucks
            if (li.USECLASS = 2,3,4) addtogroup = 4
                       
            ; Group 11 defines the value toll links the non-value-toll-paying users are prohibited from using
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_DA > 0) addtogroup = 11
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S2 > 0) addtogroup = 12
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_S3 > 0) addtogroup = 13

            ; create the link exclusion classes -- value toll links for commercial vehicles (use SML for very small, small, and medium)
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_VSM > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_SML > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_MED > 0) addtogroup = 14
            if (lw.tollclass >= firstvalue && li.TOLL@token_period@_LRG > 0) addtogroup = 15
            
         endphase


        ; set the pathload parameters
        phase = iloop

            ; no value toll paying classes first

            ; drive alone, no value toll, exclude drive alone value toll and HOV facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_da, excludegrp = 11, 23, vol[1] = mi.1.SOV_GP_@token_period@ + mi.2.da + mi.4.da

            ; shared ride 2, no value toll, exclude sr2 value toll and HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s2, excludegrp = 12, 3, vol[2] =  (mi.1.SR2_GP_@token_period@ + mi.1.SR2_HOV_@token_period@) / sr2costShare + mi.2.sr2 + mi.4.sr2

            ; shared ride 3+, no value toll, exclude sr3 value toll facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s3, excludegrp = 13, vol[3] = (mi.1.SR3_GP_@token_period@ + mi.1.SR3_HOV_@token_period@) / sr3costShare + mi.2.sr3 + mi.4.sr3

            ; very small, small, and medium trucks, no value toll, exclude small truck value toll facilities and HOV facilities
            pathload path = lw.gencost_sml, excludegrp = 14, 23, vol[4] = mi.3.vstruck + mi.3.struck + mi.3.mtruck

            ; large trucks, no value toll, exclude large truck toll facilities, HOV facilities, and no commercial truck facilities 
            pathload path = lw.gencost_lrg, excludegrp = 15, 4, vol[5] = mi.3.ctruck

            ; value toll paying classes second

            ; drive alone, value toll paying, exclude HOV facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_da, excludegrp = 23, vol[6] = mi.1.SOV_PAY_@token_period@ + mi.2.datoll + mi.4.datoll

            ; shared ride 2, value toll paying, exclude HOV 3+ facilities, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s2, excludegrp = 3, vol[7] = mi.1.SR2_PAY_@token_period@ / sr2costShare + mi.2.sr2toll + mi.4.sr2toll

            ; shared ride 3+, value toll paying, no exclusions, internal demand plus intra-regional demand plus air passenger demand
            pathload path = lw.gencost_s3, vol[8] = mi.1.SR3_PAY_@token_period@ / sr3costShare + mi.2.sr3toll + mi.4.sr3toll

            ; very small, small, and medium trucks, value toll paying, excluded from HOV facilities, use the small truck generalized cost
            pathload path = lw.gencost_sml, excludegrp = 23, vol[9]= mi.3.vstrucktoll + mi.3.strucktoll + mi.3.mtrucktoll

            ; large trucks, value toll paying, excluded from HOV facilities and no commercial truck facilities
            pathload path = lw.gencost_lrg, excludegrp = 4, vol[10] = mi.3.ctrucktoll

        endphase 
    
      ; set adjust parameters (volume delay functions)
      phase = adjust
 
         ; very small, small, and medium trucks have a passenger car equivalent of, on average 1.0, large trucks see HwyParam.block for PCE
         function v = vol[1] + vol[2] + vol[3] + vol[4] + trkpce*vol[5] + vol[6] + vol[7] + vol[8] + vol[9] + trkpce*vol[10] + li.MAZMAZVOL
           
         ; the volume delay functions are housed in the SpeedFlowCurve.block file
         read file = @vdf_block_param@
        
         ; set the generalized cost functions (same as before, only now we start with "time")
         lw.gencost_da  = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_DA)
         ;lw.gencost_s2 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare) + @token_hov_xfer_pen@
         ;lw.gencost_s3 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare) + @token_hov_xfer_pen@
         lw.gencost_s2 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S2 / sr2costShare)
         lw.gencost_s3 = time + (0.6 / vot) * (lw.dist * autoOpCost + li.TOLL@token_period@_S3 / sr3costShare)
         lw.gencost_vsm = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_VSM)
         lw.gencost_sml = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_SML)
         lw.gencost_med = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_MED)
         lw.gencost_lrg = time + (0.6 / truckVot) * (lw.dist * truckOpCost + li.TOLL@token_period@_LRG)
         
      endphase
      
   endrun  
   

   
      
   EndDistributeMultistep

 
endloop ; time period loop

Wait4Files files = MTC_HWYASN1.script.end, MTC_HWYASN2.script.end, 
          PrintFiles = merge, DelDistribFiles = t, CheckReturnCode = t

*Cluster.exe MTC_HWYASN 1-31 close exit

loop period = 1,5
  
    ; a two letter token is used for each time period
    if (period = 1)   
      token_period = 'EA'   
      token_capfacnum = 3
    elseif (period = 2)   
      token_period = 'AM'    
      token_capfacnum = 3.65
    elseif (period = 3)   
      token_period = 'MD'    
      token_capfacnum = 5
    elseif (period = 4)   
      token_period = 'PM'
      token_capfacnum = 3.65
    elseif (period = 5)   
      token_period = 'EV'
      token_capfacnum = 8
    endif

  ;write the volumes out to a text file (small network)
   RUN PGM=NETWORK
      NETI = hwy\load@token_period@.net
      LINKO = hwy\load@token_period@.CSV, FORMAT=SDF DELIMITER=',' INCLUDE=A,B,CAP_HRLN,CAP_TOTFAC,FFS,FFT,V_1,TIME_1,VC_1,CSPD_1,VDT_1,VHT_1,V1_1,V2_1,V3_1,V4_1,V5_1,V6_1,
		  V7_1,V8_1,V9_1,V10_1,VT_1,V1T_1,V2T_1,V3T_1,V4T_1,V5T_1,V6T_1,V7T_1,V8T_1,V9T_1,V10T_1
		
   ENDRUN
   
   
       
   ; read the volumes back in to the big network
   run pgm = network
      NETI = hwy\avgload@token_period@_taz_temp2.net
      LINKI[2] = hwy\load@token_period@.CSV, VAR=A,B,CAP_HRLN,CAP_TOTFAC,FFS,FFT,V_1,TIME_1,VC_1,CSPD_1,VDT_1,VHT_1,V1_1,V2_1,V3_1,V4_1,V5_1,V6_1,
		  V7_1,V8_1,V9_1,V10_1,VT_1,V1T_1,V2T_1,V3T_1,V4T_1,V5T_1,V6T_1,V7T_1,V8T_1,V9T_1,V10T_1
		
      NETO = hwy\avgload@token_period@_taz_temp3.net 

		
      PHASE=LINKMERGE

		  V_1 =   LI.2.V_1   
			CAP_HRLN= LI.2.CAP_HRLN
			CAP_TOTFAC= LI.2.CAP_TOTFAC
			FFS= LI.2.FFS
			FFT= LI.2.FFT
			VC_1=   LI.2.VC_1 
			VDT_1=  LI.2.VDT_1
			VHT_1=  LI.2.VHT_1
			V1_1=   LI.2.V1_1 
			V2_1=   LI.2.V2_1 
			V3_1=   LI.2.V3_1 
		  V4_1=   LI.2.V4_1 
			V5_1=   LI.2.V5_1 
			V6_1=   LI.2.V6_1 
			V7_1=   LI.2.V7_1 
			V8_1=   LI.2.V8_1 
			V9_1=   LI.2.V9_1 
			V10_1=  LI.2.V10_1
			VT_1 =  LI.2.VT_1 
			V1T_1=  LI.2.V1T_1
			V2T_1=  LI.2.V2T_1
			V3T_1=  LI.2.V3T_1
		  V4T_1=  LI.2.V4T_1
			V5T_1=  LI.2.V5T_1
			V6T_1=  LI.2.V6T_1
			V7T_1=  LI.2.V7T_1
			V8T_1=  LI.2.V8T_1
			V9T_1=  LI.2.V9T_1
			V10T_1= LI.2.V10T_1

	LOOKUP  NAME= Cap,LOOKUP[1]=1,RESULT=2,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        CAP_HRLN = Cap(1,CAPCLASS)
	CAP_LANE = CAP_HRLN * @token_capfacnum@
	CAP_TOTAL = CAP_LANE * NUMLANES
	CAP_TOTFAC = CAP_TOTAL * CAP_FAC
    
;F&P added if statement to only use speed lookup if inside Marin (Marin=1) and not a freeway (FT<>2)
      IF (MARIN = 1 && FT <> 2)    
        LOOKUP  NAME= Spd,LOOKUP[2]=1,RESULT=3,
        FILE = %BASE_SCRIPTS%\block\SPDCAP_LOOKUP.DAT
        SPEED = Spd(2,CAPCLASS)
	FFS = SPEED * SPD_FAC
      ELSE
	FFS = FFS * SPD_FAC
      ENDIF
	
        if (FFS > 0)
        FFT = (60.0 / 5280.0) * FEET / FFS ; (60 minutes / 1 hour) * (1 mile / 5280 feet) * (feet) * (miles / hour) => minutes
        else
        FFT = (60.0 / 5280.0) * FEET / 25 ; put a default of 25 mph
	endif
	
			IF(LI.1.DELETE=1) TIME_1=FFT
			IF(LI.1.DELETE=1) CSPD_1=FFS
			IF(LI.1.DELETE=1) CAP_HRLN = CAP_HRLN
			IF(LI.1.DELETE=1) CAP_TOTFAC = CAP_TOTFAC
			IF(LI.1.DELETE=1) FFS = FFS
			IF(LI.1.DELETE=1) FFT = FFT
			IF(LI.1.DELETE=1) V_1 = li.1.MAZMAZVOL 
			IF(LI.1.DELETE=1) VC_1= (V_1 + 1) / (CAP_TOTFAC + 1)
			IF(LI.1.DELETE=1) VDT_1= V_1 * (FEET / 5280)
			IF(LI.1.DELETE=1) VHT_1= V_1 * FFT / 60
			IF(LI.1.DELETE=1) V1_1= 0
			IF(LI.1.DELETE=1) V2_1= 0
			IF(LI.1.DELETE=1) V3_1= 0
		  IF(LI.1.DELETE=1) V4_1= 0
			IF(LI.1.DELETE=1) V5_1= 0
			IF(LI.1.DELETE=1) V6_1= 0
			IF(LI.1.DELETE=1) V7_1= 0
			IF(LI.1.DELETE=1) V8_1= 0
			IF(LI.1.DELETE=1) V9_1= 0
			IF(LI.1.DELETE=1) V10_1= 0
			IF(LI.1.DELETE=1) VT_1 = 0
			IF(LI.1.DELETE=1) V1T_1= 0
			IF(LI.1.DELETE=1) V2T_1= 0
			IF(LI.1.DELETE=1) V3T_1= 0
		  IF(LI.1.DELETE=1) V4T_1= 0
			IF(LI.1.DELETE=1) V5T_1= 0
			IF(LI.1.DELETE=1) V6T_1= 0
			IF(LI.1.DELETE=1) V7T_1= 0
			IF(LI.1.DELETE=1) V8T_1= 0
			IF(LI.1.DELETE=1) V9T_1= 0
			IF(LI.1.DELETE=1) V10T_1= 0
			
        ENDPHASE
    endrun
  
    ; delete the output from assignment, rename the merged file to load, and delete the temp files.
     *DEL hwy\load@token_period@.csv
     *DEL hwy\avgload@token_period@_taz_temp1.net
     *copy hwy\avgload@token_period@_taz_temp2.net hwy\avgload@token_period@_taz.net
     *DEL hwy\avgload@token_period@_taz_temp2.net
     *copy hwy\avgload@token_period@_taz_temp3.net hwy\load@token_period@.net
     *DEL hwy\avgload@token_period@_taz_temp3.net
    
endloop ; time period loop
 


